package com.example.electronics.serviceImpl;

import java.util.UUID;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.example.electronics.dto.PageableResponse;
import com.example.electronics.dto.ProductDto;
import com.example.electronics.entity.Product;
import com.example.electronics.exception.ResourceNotFoundException;
import com.example.electronics.repository.ProductRepository;
import com.example.electronics.service.ProductService;
import com.example.electronics.utility.Helper;

@Service
public class ProductServiceImpl implements ProductService {

	@Autowired
	private ProductRepository productRepository;

	@Autowired
	private ModelMapper modelmapper;

	@Override
	public ProductDto createProduct(ProductDto productDto) {

		String productId = UUID.randomUUID().toString();
		productDto.setProductId(productId);

		Product product = modelmapper.map(productDto, Product.class);
		Product savedProduct = productRepository.save(product);
		return modelmapper.map(savedProduct, ProductDto.class);
	}

	@Override
	public ProductDto update(ProductDto productDto, String productId) {
		Product product = productRepository.findById(productId)
				.orElseThrow(() -> new ResourceNotFoundException("Product not found with Id: " + productId));

		product.setTitle(productDto.getTitle());
		product.setDescription(productDto.getDescription());
		product.setPrice(productDto.getPrice());
		product.setDiscountedPrice(productDto.getDiscountedPrice());
		product.setQuantity(productDto.getQuantity());
		product.setLive(productDto.isLive());
		product.setStock(productDto.isStock());
		product.setAddedDate(productDto.getAddedDate());

		// Step 3: Save updated product
		Product updatedProduct = productRepository.save(product);

		// Step 4: Map to DTO and return
		return modelmapper.map(updatedProduct, ProductDto.class);
	}

	@Override
	public void delete(String productId) {
		Product product = productRepository.findById(productId)
				.orElseThrow(() -> new ResourceNotFoundException("Product not found with Id: " + productId));
		productRepository.delete(product);
	}

	@Override
	public ProductDto get(String productId) {
		Product product = productRepository.findById(productId)
				.orElseThrow(() -> new ResourceNotFoundException("Product not found with Id: " + productId));
		return modelmapper.map(product, ProductDto.class);
	}

	@Override
	public PageableResponse<ProductDto> getAllProducts(int pageNumber, int pageSize, String sortBy, String sortDir) {
		Sort sort = sortDir.equalsIgnoreCase("desc") ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();
		Pageable pageable = PageRequest.of(pageNumber, pageSize, sort);

		Page<Product> page = productRepository.findAll(pageable);

		PageableResponse<ProductDto> response = Helper.getPageableResponse(page, ProductDto.class);
		return response;

	}

	@Override
	public PageableResponse<ProductDto> getAllLive(int pageNumber, int pageSize, String sortBy, String sortDir) {
		Sort sort = sortDir.equalsIgnoreCase("desc") ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();
		Pageable pageable = PageRequest.of(pageNumber, pageSize, sort);

		Page<Product> page = productRepository.findByLiveTrue(pageable);

		PageableResponse<ProductDto> response = Helper.getPageableResponse(page, ProductDto.class);
		return response;
	}

	@Override
	public PageableResponse<ProductDto> searchByTitle(String subTitle, int pageNumber, int pageSize, String sortBy,
			String sortDir) {
		Sort sort = sortDir.equalsIgnoreCase("desc") ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();
		Pageable pageable = PageRequest.of(pageNumber, pageSize, sort);

		Page<Product> page = productRepository.findByTitleContaining(subTitle, pageable);

		PageableResponse<ProductDto> response = Helper.getPageableResponse(page, ProductDto.class);
		return response;
	}

	@Override
	public ProductDto createcategory(ProductDto productDto, String categoryId) {
		// TODO Auto-generated method stub
		return null;
	}

}
