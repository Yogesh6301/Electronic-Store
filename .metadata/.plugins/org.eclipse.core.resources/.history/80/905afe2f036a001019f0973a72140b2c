package com.example.electronics.controller;

@RestController
@RequestMapping("/auth")
public class AuthController {

	@Autowired
	private UserDetailsService userDetailsService;
	@Autowired
	private ModelMapper modelMapper;
	@Autowired
	private AuthenticationManager manager;
	@Autowired
	private UserService userService;

	@Autowired
	private JwtHelper helper;

	@Value("${googleClientId}")
	private String googleClientId;
	@Value("${newPassword}")
	private String newPassword;

	private Logger logger = LoggerFactory.getLogger(AuthController.class);

	@PostMapping("/login")
	public ResponseEntity<JwtResponse> login(@RequestBody JwtRequest request) {
		this.doAuthenticate(request.getEmail(), request.getPassword());
		UserDetails userDetails = userDetailsService.loadUserByUsername(request.getEmail());
		String token = this.helper.generateToken(userDetails);
		UserDto userDto = modelMapper.map(userDetails, UserDto.class);
		JwtResponse response = JwtResponse.builder().jwtToken(token).user(userDto).build();
		return new ResponseEntity<>(response, HttpStatus.OK);
	}

	private void doAuthenticate(String email, String password) {

		UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(email, password);
		try {
			manager.authenticate(authentication);
		} catch (BadCredentialsException e) {
			throw new BadApiRequestException(" Invalid Username or Password  !!");
		}

	}

	@GetMapping("/current")
	public ResponseEntity<UserDto> getCurrentUser(Principal principal) {
		String name = principal.getName();
		return new ResponseEntity<>(modelMapper.map(userDetailsService.loadUserByUsername(name), UserDto.class),
				HttpStatus.OK);
	}

	private User saveUser(String email, String name, String photoUrl) {

		UserDto newUser = UserDto.builder().name(name).email(email).password(newPassword).imageName(photoUrl)
				.roles(new HashSet<>()).build();

		UserDto user = userService.createUser(newUser);

		return this.modelMapper.map(user, User.class);

	}

}
