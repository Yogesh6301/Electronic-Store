package com.example.electronics.serviceImpl;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.example.electronics.dto.PageableResponse;
import com.example.electronics.dto.UserDto;
import com.example.electronics.entity.User;
import com.example.electronics.exception.ResourceNotFoundException;
import com.example.electronics.repository.UserRepository;
import com.example.electronics.service.UserService;
import com.example.electronics.utility.Helper;

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	private UserRepository userRepository;
	
	v

	@Override
	public UserDto createUser(UserDto userDto) {

		// Generate unique Id
		String userId = UUID.randomUUID().toString();
		userDto.setUserId(userId);

		// Dto to Entity Conversion
		User user = dtoToEntity(userDto);
		 user.setPassword(passwordEncoder.encode(user.getPassword()));

		User savedUser = userRepository.save(user);

		// Entity to Dto Conversion
		UserDto userDto1 = entityToDto(savedUser);

		return userDto1;
	}

	@Override
	public UserDto updateUser(UserDto userDto, String userId) {
		User user = userRepository.findById(userId)
				.orElseThrow(() -> new ResourceNotFoundException("User Not found with Id Exception"));
		user.setName(userDto.getName());
		user.setPassword(userDto.getPassword());
		user.setGender(userDto.getAbout());
		user.setAbout(userDto.getAbout());
		user.setImageName(userDto.getImageName());

		User updatedUser = userRepository.save(user);
		UserDto updatedDto = entityToDto(updatedUser);

		return updatedDto;
	}

	@Override
	public void deleteUser(String userId) {
		User user = userRepository.findById(userId)
				.orElseThrow(() -> new ResourceNotFoundException("User Not found with Id Exception"));
		userRepository.delete(user);

	}

	@Override
	public PageableResponse<UserDto> getAllUsers(int pageNumber, int pageSize, String sortBy, String sortDir) {
		Sort sort = sortDir.equalsIgnoreCase("desc") ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();
		Pageable pageable = PageRequest.of(pageNumber, pageSize, sort);

		Page<User> page = userRepository.findAll(pageable);

		PageableResponse<UserDto> response = Helper.getPageableResponse(page, UserDto.class);
		return response;
	}

	@Override
	public UserDto getUserById(String userId) {
		User user = userRepository.findById(userId)
				.orElseThrow(() -> new ResourceNotFoundException("User Not found with Id Exception"));

		return entityToDto(user);
	}

	@Override
	public UserDto getUserByEmail(String email) {
		User user = userRepository.findByEmail(email)
				.orElseThrow(() -> new ResourceNotFoundException("User Not found with EmailId"));
		return entityToDto(user);
	}

	@Override
	public List<UserDto> searchUser(String keyword) {
		List<User> users = userRepository.findByNameContaining(keyword);
		List<UserDto> dtoList = users.stream().map(user -> entityToDto(user)).collect(Collectors.toList());
		return dtoList;
	}

	private User dtoToEntity(UserDto userDto) {
		User user = new User.Builder().userId(userDto.getUserId()).name(userDto.getName()).email(userDto.getEmail())
				.password(userDto.getPassword()).about(userDto.getAbout()).gender(userDto.getGender())
				.imageName(userDto.getImageName()).build();

		return user;
	}

	private UserDto entityToDto(User savedUser) {

		UserDto userDto = new UserDto.Builder().userId(savedUser.getUserId()).name(savedUser.getName())
				.email(savedUser.getEmail()).password(savedUser.getPassword()).about(savedUser.getAbout())
				.gender(savedUser.getGender()).imageName(savedUser.getImageName()).build();

		return userDto;

	}

}
