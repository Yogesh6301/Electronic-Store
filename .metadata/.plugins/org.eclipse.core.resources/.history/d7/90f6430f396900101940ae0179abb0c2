package com.example.electronics.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.electronics.dto.ApiResponseMessage;
import com.example.electronics.dto.CategoryDto;
import com.example.electronics.dto.PageableResponse;
import com.example.electronics.dto.ProductDto;
import com.example.electronics.service.ProductService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/product")
public class ProductController {

	@Autowired
	private ProductService productService;

	// Create Category
	@PostMapping("/create")
	public ResponseEntity<ProductDto> createProduct(@Valid @RequestBody ProductDto productDto) {
		ProductDto createdProduct = productService.createProduct(productDto);
		return new ResponseEntity<>(createdProduct, HttpStatus.CREATED);
	}

	// Update Category
	@PutMapping("/{productId}")
	public ResponseEntity<ProductDto> updateProduct(@Valid @RequestBody ProductDto productDto,
			@PathVariable String productId) {
		ProductDto updatedProduct = productService.update(productDto, productId);
		return new ResponseEntity<>(updatedProduct, HttpStatus.OK);
	}

	// Delete Category
	@DeleteMapping("/{categoryId}")
	public ResponseEntity<ApiResponseMessage> deleteCategory(@PathVariable String categoryId) {
		categoryService.delete(categoryId);
		ApiResponseMessage response = new ApiResponseMessage.Builder().message("Category deleted successfully")
				.success(true).status(HttpStatus.OK).build();
		return new ResponseEntity<>(response, HttpStatus.OK);
	}

	// Get All Categories (Paginated)
	@GetMapping
	public ResponseEntity<PageableResponse<ProductDto>> getAllProduct(
			@RequestParam(value = "pageNumber", defaultValue = "0", required = false) int pageNumber,
			@RequestParam(value = "pageSize", defaultValue = "5", required = false) int pageSize,
			@RequestParam(value = "sortBy", defaultValue = "title", required = false) String sortBy,
			@RequestParam(value = "sortDir", defaultValue = "asc", required = false) String sortDir) {

		PageableResponse<ProductDto> categories = productService.getAllProducts(pageNumber, pageSize, sortBy, sortDir);
		return new ResponseEntity<>(categories, HttpStatus.OK);
	}

	// Get Single Category
	@GetMapping("/{categoryId}")
	public ResponseEntity<CategoryDto> getCategory(@PathVariable String categoryId) {
		CategoryDto category = categoryService.get(categoryId);
		return new ResponseEntity<>(category, HttpStatus.OK);
	
	

}
